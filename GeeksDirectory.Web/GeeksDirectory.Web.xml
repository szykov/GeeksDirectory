<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeeksDirectory.Web</name>
    </assembly>
    <members>
        <member name="T:GeeksDirectory.Web.Controllers.AuthorizationController">
                 * <summary>Authorization Controller for generating JWT Oauth2 tokens</summary>
                 * <remarks>Methods related to authorization and authentication.</remarks>
                *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.AuthorizationController.Exchange(AspNet.Security.OpenIdConnect.Primitives.OpenIdConnectRequest)">
             <summary>Generate JWT token</summary>
             <remarks>Creates **Oauth2** token with **client credentials** flow scheme and **Bearer** token type.
             **grant_type** should be always specified as **client_credentials**.
             For **clientId** and **clientSecret** please send a request to the administrator. Send different request for each required scope.
            
             curl -X POST
             http://geeks-directory.azurewebsites.net/ \
             -H 'Content-Type: application/x-www-form-urlencoded' \
             -H 'cache-control: no-cache' \
             -d 'grant_type=password%26username=your_name%26password=your_password'
             </remarks>
             <example>
             grant_type=password&amp;username=your_name&amp;password=your_password
             </example>
             <param name="request">Request with clientID, clientSecret, scope and etc</param>
             <returns>Returns JWT token</returns>
        </member>
        <member name="T:GeeksDirectory.Web.Controllers.ProfilesController">
             <summary>Profiles controller with actions related to profiles</summary>
             <remarks>CRUD operations regarding profiles.</remarks>
            
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.ProfilesController.GetProfiles(GeeksDirectory.Web.ResourceParameters.ProfilesResourceParameters)">
                     * <summary>Get profiles</summary>
                     * <remarks>Get profiles.</remarks>
                     * <param name="limit">Limit how many matches will be returned</param>
                     * <param name="offset">How many matched users will be skipped</param>
                     * <param name="orderBy">Order by which profile's property</param>
                     * <param name="orderDirection">Either ASC or DESC</param>
                     * <returns>Collecitons of profiles</returns>
                    *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.ProfilesController.GetMyProfile">
                     * <summary>Get personal profile</summary>
                     * <remarks>Get personal profile based on authenticated credentials.</remarks>
                     * <returns>Profile of authenticated user</returns>
                    *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.ProfilesController.SearchProfiles(GeeksDirectory.Web.ResourceParameters.SearchProfilesResourceParameters)">
                     * <summary>Search profiles</summary>
                     * <remarks>Search for profiles based on query.</remarks>
                     * <param name="filter">Text for filtering profiles</param>
                     * <param name="limit">Limit how many matches will be returned</param>
                     * <param name="offset">How many matched users will be skipped</param>
                     * <param name="orderBy">Order by which profile's property</param>
                     * <param name="orderDirection">Either ASC or DESC</param>
                     * <returns>Profile of authentificated user</returns>
                    *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.ProfilesController.GetProfile(System.Int32)">
                     * <summary>Get profile</summary>
                     * <remarks>Get profile by id.</remarks>
                     * <param name="id">User profile id</param>
                     * <returns>User profile</returns>
                    *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.ProfilesController.RegisterProfileAsync(GeeksDirectory.Domain.Models.CreateGeekProfileModel)">
                     * <summary>Register profile</summary>
                     * <remarks>Register new profile.</remarks>
                     * <param name="model">User profile model</param>
                     * <returns>Created user profile</returns>
                    *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.ProfilesController.UpdatePersonalProfile(GeeksDirectory.Domain.Models.GeekProfileModel)">
                     * <summary>Update profile</summary>
                     * <remarks>Update user profile properties except email.</remarks>
                     * <param name="model">User profile model</param>
                     * <returns>Updated user profile</returns>
                    *
        </member>
        <member name="T:GeeksDirectory.Web.Controllers.SkillsController">
                 * <summary>Skills controller with actions related to skills</summary>
                 * <remarks>CRUD operations regarding skills.</remarks>
                *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.SkillsController.GetSkill(System.Int32)">
                     * <summary>Get skill</summary>
                     * <remarks>Get profile's skill by it's name.</remarks>
                     * <param name="skillId">Skill's id</param>
                     * <returns>Matched skill</returns>
                    *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.SkillsController.RegisterSkillAsync(System.Int32,GeeksDirectory.Domain.Models.SkillModel)">
                     * <summary>Add skill</summary>
                     * <remarks>Add skill to profile.</remarks>
                     * <param name="profileId">User profile id</param>
                     * <param name="model">Skill's model</param>
                     * <returns>Added skill</returns>
                    *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.SkillsController.EvaluateSkillAsync(System.Int32,GeeksDirectory.Domain.Models.SkillEvaluationModel)">
                     * <summary>Evaluate skill</summary>
                     * <remarks>Evaluate profile's skill.</remarks>
                     * <param name="skillId">Skill's id</param>
                     * <param name="model">Skill Evaluation model</param>
                     * <returns>Updated skill's average score</returns>
                    *
        </member>
        <member name="M:GeeksDirectory.Web.Controllers.SkillsController.GetMySkillEvaluationAsync(System.Int32)">
                     * <summary>Get previous skill evaluation</summary>
                     * <remarks>Try to get previous skill evaluation if such exists</remarks>
                     * <param name="skillId">Skill's id</param>
                     * <returns>Assessment data with your score</returns>
                    *
        </member>
    </members>
</doc>
